        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/*
        -:    9: * PROTOTYPES
        -:   10: */
        -:   11:int cardSmithy(int card, struct gameState *state, int handPos, int currentPlayer);
        -:   12:int cardVillage(int card, struct gameState *state, int handPos, int currentPlayer);
        -:   13:int cardGreat_hall(int card, struct gameState *state, int handPos, int currentPlayer);
        -:   14:int cardRemodel(int choice1, int choice2, int card, struct gameState *state, int handPos, int currentPlayer);
        -:   15:int cardSteward(int choice1, int choice2, int choice3, int card, struct gameState *state, int handPos, int currentPlayer);
        -:   16:
        -:   17:
     1920:   18:int compare(const void* a, const void* b) {
     1920:   19:  if (*(int*)a > *(int*)b)
    #####:   20:    return 1;
     1920:   21:  if (*(int*)a < *(int*)b)
      512:   22:    return -1;
     1408:   23:  return 0;
        -:   24:}
        -:   25:
    #####:   26:struct gameState* newGame() {
    #####:   27:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   28:  return g;
        -:   29:}
        -:   30:
    #####:   31:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   32:		  int k8, int k9, int k10) {
    #####:   33:  int* k = malloc(10 * sizeof(int));
    #####:   34:  k[0] = k1;
    #####:   35:  k[1] = k2;
    #####:   36:  k[2] = k3;
    #####:   37:  k[3] = k4;
    #####:   38:  k[4] = k5;
    #####:   39:  k[5] = k6;
    #####:   40:  k[6] = k7;
    #####:   41:  k[7] = k8;
    #####:   42:  k[8] = k9;
    #####:   43:  k[9] = k10;
    #####:   44:  return k;
        -:   45:}
        -:   46:
       64:   47:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   48:		   struct gameState *state) {
        -:   49:
        -:   50:  int i;
        -:   51:  int j;
        -:   52:  int it;			
        -:   53:  //set up random number generator
       64:   54:  SelectStream(1);
       64:   55:  PutSeed((long)randomSeed);
        -:   56:  
        -:   57:  //check number of players
       64:   58:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   59:    {
    #####:   60:      return -1;
        -:   61:    }
        -:   62:
        -:   63:  //set number of players
       64:   64:  state->numPlayers = numPlayers;
        -:   65:
        -:   66:  //check selected kingdom cards are different
      704:   67:  for (i = 0; i < 10; i++)
        -:   68:    {
     7040:   69:      for (j = 0; j < 10; j++)
        -:   70:        {
     6400:   71:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   72:	    {
    #####:   73:	      return -1;
        -:   74:	    }
        -:   75:        }
        -:   76:    }
        -:   77:
        -:   78:
        -:   79:  //initialize supply
        -:   80:  ///////////////////////////////
        -:   81:
        -:   82:  //set number of Curse cards
       64:   83:  if (numPlayers == 2)
        -:   84:    {
       64:   85:      state->supplyCount[curse] = 10;
        -:   86:    }
    #####:   87:  else if (numPlayers == 3)
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 20;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 30;
        -:   94:    }
        -:   95:
        -:   96:  //set number of Victory cards
       64:   97:  if (numPlayers == 2)
        -:   98:    {
       64:   99:      state->supplyCount[estate] = 8;
       64:  100:      state->supplyCount[duchy] = 8;
       64:  101:      state->supplyCount[province] = 8;
        -:  102:    }
        -:  103:  else
        -:  104:    {
    #####:  105:      state->supplyCount[estate] = 12;
    #####:  106:      state->supplyCount[duchy] = 12;
    #####:  107:      state->supplyCount[province] = 12;
        -:  108:    }
        -:  109:
        -:  110:  //set number of Treasure cards
       64:  111:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       64:  112:  state->supplyCount[silver] = 40;
       64:  113:  state->supplyCount[gold] = 30;
        -:  114:
        -:  115:  //set number of Kingdom cards
     1344:  116:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  117:    {
    10560:  118:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  119:	{
     9920:  120:	  if (kingdomCards[j] == i)
        -:  121:	    {
        -:  122:	      //check if card is a 'Victory' Kingdom card
      640:  123:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  124:		{
      128:  125:		  if (numPlayers == 2){ 
       64:  126:		    state->supplyCount[i] = 8; 
        -:  127:		  }
    #####:  128:		  else{ state->supplyCount[i] = 12; }
        -:  129:		}
        -:  130:	      else
        -:  131:		{
      576:  132:		  state->supplyCount[i] = 10;
        -:  133:		}
      640:  134:	      break;
        -:  135:	    }
        -:  136:	  else    //card is not in the set choosen for the game
        -:  137:	    {
     9280:  138:	      state->supplyCount[i] = -1;
        -:  139:	    }
        -:  140:	}
        -:  141:
        -:  142:    }
        -:  143:
        -:  144:  ////////////////////////
        -:  145:  //supply intilization complete
        -:  146:
        -:  147:  //set player decks
      192:  148:  for (i = 0; i < numPlayers; i++)
        -:  149:    {
      128:  150:      state->deckCount[i] = 0;
      512:  151:      for (j = 0; j < 3; j++)
        -:  152:	{
      384:  153:	  state->deck[i][j] = estate;
      384:  154:	  state->deckCount[i]++;
        -:  155:	}
     1024:  156:      for (j = 3; j < 10; j++)
        -:  157:	{
      896:  158:	  state->deck[i][j] = copper;
      896:  159:	  state->deckCount[i]++;		
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //shuffle player decks
      192:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {
      128:  166:      if ( shuffle(i, state) < 0 )
        -:  167:	{
    #####:  168:	  return -1;
        -:  169:	}
        -:  170:    }
        -:  171:
        -:  172:  //draw player hands
      192:  173:  for (i = 0; i < numPlayers; i++)
        -:  174:    {  
        -:  175:      //initialize hand size to zero
      128:  176:      state->handCount[i] = 0;
      128:  177:      state->discardCount[i] = 0;
        -:  178:      //draw 5 cards
        -:  179:      // for (j = 0; j < 5; j++)
        -:  180:      //	{
        -:  181:      //	  drawCard(i, state);
        -:  182:      //	}
        -:  183:    }
        -:  184:  
        -:  185:  //set embargo tokens to 0 for all supply piles
     1792:  186:  for (i = 0; i <= treasure_map; i++)
        -:  187:    {
     1728:  188:      state->embargoTokens[i] = 0;
        -:  189:    }
        -:  190:
        -:  191:  //initialize first player's turn
       64:  192:  state->outpostPlayed = 0;
       64:  193:  state->phase = 0;
       64:  194:  state->numActions = 1;
       64:  195:  state->numBuys = 1;
       64:  196:  state->playedCardCount = 0;
       64:  197:  state->whoseTurn = 0;
       64:  198:  state->handCount[state->whoseTurn] = 0;
        -:  199:  //int it; move to top
        -:  200:
        -:  201:  //Moved draw cards to here, only drawing at the start of a turn
      384:  202:  for (it = 0; it < 5; it++){
      320:  203:    drawCard(state->whoseTurn, state);
        -:  204:  }
        -:  205:
       64:  206:  updateCoins(state->whoseTurn, state, 0);
        -:  207:
       64:  208:  return 0;
        -:  209:}
        -:  210:
      128:  211:int shuffle(int player, struct gameState *state) {
        -:  212: 
        -:  213:
        -:  214:  int newDeck[MAX_DECK];
      128:  215:  int newDeckPos = 0;
        -:  216:  int card;
        -:  217:  int i;
        -:  218:
      128:  219:  if (state->deckCount[player] < 1)
    #####:  220:    return -1;
      128:  221:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  222:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  223:
     1536:  224:  while (state->deckCount[player] > 0) {
     1280:  225:    card = floor(Random() * state->deckCount[player]);
     1280:  226:    newDeck[newDeckPos] = state->deck[player][card];
     1280:  227:    newDeckPos++;
     4288:  228:    for (i = card; i < state->deckCount[player]-1; i++) {
     3008:  229:      state->deck[player][i] = state->deck[player][i+1];
        -:  230:    }
     1280:  231:    state->deckCount[player]--;
        -:  232:  }
     1408:  233:  for (i = 0; i < newDeckPos; i++) {
     1280:  234:    state->deck[player][i] = newDeck[i];
     1280:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
      128:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  242:{	
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //check if player has enough actions
    #####:  253:  if ( state->numActions < 1 )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:	
        -:  261:  //check if selected card is an action
    #####:  262:  if ( card < adventurer || card > treasure_map )
        -:  263:    {
    #####:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //play card
    #####:  268:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  269:    {
    #####:  270:      return -1;
        -:  271:    }
        -:  272:	
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:	
    #####:  279:  return 0;
        -:  280:}
        -:  281:
        4:  282:int buyCard(int supplyPos, struct gameState *state) {
        -:  283:  int who;
        -:  284:  if (DEBUG){
        -:  285:    printf("Entering buyCard...\n");
        -:  286:  }
        -:  287:
        -:  288:  // I don't know what to do about the phase thing.
        -:  289:
        4:  290:  who = state->whoseTurn;
        -:  291:
        4:  292:  if (state->numBuys < 1){
        -:  293:    if (DEBUG)
        -:  294:      printf("You do not have any buys left\n");
        1:  295:    return -1;
        3:  296:  } else if (supplyCount(supplyPos, state) <1){
        -:  297:    if (DEBUG)
        -:  298:      printf("There are not any of that type of card left\n");
        1:  299:    return -1;
        2:  300:  } else if (state->coins < getCost(supplyPos)){
        -:  301:    if (DEBUG) 
        -:  302:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  303:    return -1;
        -:  304:  } else {
        1:  305:    state->phase=1;
        -:  306:    //state->supplyCount[supplyPos]--;
        1:  307:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  308:  
        1:  309:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  310:    state->numBuys--;
        -:  311:    if (DEBUG)
        -:  312:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  313:  }
        -:  314:
        -:  315:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  316:  //state->discardCount[who]++;
        -:  317:    
        1:  318:  return 0;
        -:  319:}
        -:  320:
    #####:  321:int numHandCards(struct gameState *state) {
    #####:  322:  return state->handCount[ whoseTurn(state) ];
        -:  323:}
        -:  324:
    #####:  325:int handCard(int handPos, struct gameState *state) {
    #####:  326:  int currentPlayer = whoseTurn(state);
    #####:  327:  return state->hand[currentPlayer][handPos];
        -:  328:}
        -:  329:
        4:  330:int supplyCount(int card, struct gameState *state) {
        4:  331:  return state->supplyCount[card];
        -:  332:}
        -:  333:
    #####:  334:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  335:  int i;
    #####:  336:  int count = 0;
        -:  337:
    #####:  338:  for (i = 0; i < state->deckCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->deck[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->handCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->hand[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  for (i = 0; i < state->discardCount[player]; i++)
        -:  349:    {
    #####:  350:      if (state->discard[player][i] == card) count++;
        -:  351:    }
        -:  352:
    #####:  353:  return count;
        -:  354:}
        -:  355:
       63:  356:int whoseTurn(struct gameState *state) {
       63:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
    #####:  360:int endTurn(struct gameState *state) {
        -:  361:  int k;
        -:  362:  int i;
    #####:  363:  int currentPlayer = whoseTurn(state);
        -:  364:  
        -:  365:  //Discard hand
    #####:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
    #####:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:    
        -:  372:  //Code for determining the player
    #####:  373:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  375:  }
        -:  376:  else{
    #####:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  378:  }
        -:  379:
    #####:  380:  state->outpostPlayed = 0;
    #####:  381:  state->phase = 0;
    #####:  382:  state->numActions = 1;
    #####:  383:  state->coins = 0;
    #####:  384:  state->numBuys = 1;
    #####:  385:  state->playedCardCount = 0;
    #####:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
    #####:  390:  for (k = 0; k < 5; k++){
    #####:  391:    drawCard(state->whoseTurn, state);//Draw a card
        -:  392:  }
        -:  393:
        -:  394:  //Update money
    #####:  395:  updateCoins(state->whoseTurn, state , 0);
        -:  396:
    #####:  397:  return 0;
        -:  398:}
        -:  399:
    #####:  400:int isGameOver(struct gameState *state) {
        -:  401:  int i;
        -:  402:  int j;
        -:  403:	
        -:  404:  //if stack of Province cards is empty, the game ends
    #####:  405:  if (state->supplyCount[province] == 0)
        -:  406:    {
    #####:  407:      return 1;
        -:  408:    }
        -:  409:
        -:  410:  //if three supply pile are at 0, the game ends
    #####:  411:  j = 0;
    #####:  412:  for (i = 0; i < 25; i++)
        -:  413:    {
    #####:  414:      if (state->supplyCount[i] == 0)
        -:  415:	{
    #####:  416:	  j++;
        -:  417:	}
        -:  418:    }
    #####:  419:  if ( j >= 3)
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
    #####:  424:  return 0;
        -:  425:}
        -:  426:
    #####:  427:int scoreFor (int player, struct gameState *state) {
        -:  428:
        -:  429:  int i;
    #####:  430:  int score = 0;
        -:  431:  //score from hand
    #####:  432:  for (i = 0; i < state->handCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from discard
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
    #####:  454:  for (i = 0; i < state->discardCount[player]; i++)
        -:  455:    {
    #####:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  459:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  462:    }
        -:  463:
    #####:  464:  return score;
        -:  465:}
        -:  466:
    #####:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;	
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
    #####:  474:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  475:    {
        -:  476:      //set unused player scores to -9999
    #####:  477:      if (i >= state->numPlayers)
        -:  478:	{
    #####:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
    #####:  483:	  players[i] = scoreFor (i, state);
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
    #####:  488:  j = 0;
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if (players[i] > players[j])
        -:  492:	{
    #####:  493:	  j = i;
        -:  494:	}
        -:  495:    }
    #####:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
    #####:  499:  currentPlayer = whoseTurn(state);
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] == highScore && i > currentPlayer )
        -:  503:	{
    #####:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
    #####:  509:  j = 0;
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] > players[j] )
        -:  513:	{
    #####:  514:	  j = i;
        -:  515:	}
        -:  516:    }
    #####:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
    #####:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
    #####:  522:      if ( players[i] == highScore )
        -:  523:	{
    #####:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
    #####:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
    #####:  532:  return 0;
        -:  533:}
        -:  534:
      386:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
      386:  538:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
    #####:  543:    for (i = 0; i < state->discardCount[player];i++){
    #####:  544:      state->deck[player][i] = state->discard[player][i];
    #####:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
    #####:  548:    state->deckCount[player] = state->discardCount[player];
    #####:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
    #####:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:   
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
    #####:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
    #####:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
        -:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
    #####:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
    #####:  569:    if (deckCounter == 0)
    #####:  570:      return -1;
        -:  571:
    #####:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  573:    state->deckCount[player]--;
    #####:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
      386:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
        -:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
      386:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
      386:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      386:  586:    state->deckCount[player]--;
      386:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
      386:  590:  return 0;
        -:  591:}
        -:  592:
       31:  593:int getCost(int cardNumber)
        -:  594:{
       31:  595:  switch( cardNumber ) 
        -:  596:    {
        -:  597:    case curse:
        1:  598:      return 0;
        -:  599:    case estate:
        1:  600:      return 2;
        -:  601:    case duchy:
        1:  602:      return 5;
        -:  603:    case province:
        4:  604:      return 8;
        -:  605:    case copper:
        1:  606:      return 0;
        -:  607:    case silver:
        1:  608:      return 3;
        -:  609:    case gold:
        1:  610:      return 6;
        -:  611:    case adventurer:
        1:  612:      return 6;
        -:  613:    case council_room:
        1:  614:      return 5;
        -:  615:    case feast:
        1:  616:      return 4;
        -:  617:    case gardens:
        1:  618:      return 4;
        -:  619:    case mine:
        1:  620:      return 5;
        -:  621:    case remodel:
        1:  622:      return 4;
        -:  623:    case smithy:
        1:  624:      return 4;
        -:  625:    case village:
        1:  626:      return 3;
        -:  627:    case baron:
        1:  628:      return 4;
        -:  629:    case great_hall:
        1:  630:      return 3;
        -:  631:    case minion:
        1:  632:      return 5;
        -:  633:    case steward:
        1:  634:      return 3;
        -:  635:    case tribute:
        1:  636:      return 5;
        -:  637:    case ambassador:
        1:  638:      return 3;
        -:  639:    case cutpurse:
        1:  640:      return 4;
        -:  641:    case embargo: 
        1:  642:      return 2;
        -:  643:    case outpost:
        1:  644:      return 5;
        -:  645:    case salvager:
        1:  646:      return 4;
        -:  647:    case sea_hag:
        1:  648:      return 4;
        -:  649:    case treasure_map:
        1:  650:      return 4;
        -:  651:    }
        -:  652:	
        1:  653:  return -1;
        -:  654:}
        -:  655:
       63:  656:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  657:{
        -:  658:  int i;
        -:  659:  int j;
        -:  660:  int k;
        -:  661:  int x;
        -:  662:  int index;
       63:  663:  int currentPlayer = whoseTurn(state);
       63:  664:  int nextPlayer = currentPlayer + 1;
        -:  665:
       63:  666:  int tributeRevealedCards[2] = {-1, -1};
        -:  667:  int temphand[MAX_HAND];// moved above the if statement
       63:  668:  int drawntreasure=0;
        -:  669:  int cardDrawn;
       63:  670:  int z = 0;// this is the counter for the temp hand
        -:  671:  
       63:  672:  int toReturn = -1;	//This is the value to return after getting data from functions
        -:  673:  
       63:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
        -:  676:  }
        -:  677:  
        -:  678:	
        -:  679:  //uses switch to select card and perform actions
       63:  680:  switch( card ) 
        -:  681:    {
        -:  682:    case adventurer:
    #####:  683:      while(drawntreasure<2){
    #####:  684:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  685:	  shuffle(currentPlayer, state);
        -:  686:	}
    #####:  687:	drawCard(currentPlayer, state);
    #####:  688:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  689:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  690:	  drawntreasure++;
        -:  691:	else{
    #####:  692:	  temphand[z]=cardDrawn;
    #####:  693:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  694:	  z++;
        -:  695:	}
        -:  696:      }
    #####:  697:      while(z-1>=0){
    #####:  698:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  699:	z=z-1;
        -:  700:      }
    #####:  701:      return 0;
        -:  702:			
        -:  703:    case council_room:
        -:  704:      //+4 Cards
        5:  705:      for (i = 0; i < 4; i++)
        -:  706:	{
        4:  707:	  drawCard(currentPlayer, state);
        -:  708:	}
        -:  709:			
        -:  710:      //+1 Buy
        1:  711:      state->numBuys++;
        -:  712:			
        -:  713:      //Each other player draws a card
        3:  714:      for (i = 0; i < state->numPlayers; i++)
        -:  715:	{
        2:  716:	  if ( i != currentPlayer )
        -:  717:	    {
        1:  718:	      drawCard(i, state);
        -:  719:	    }
        -:  720:	}
        -:  721:			
        -:  722:      //put played card in played card pile
        1:  723:      discardCard(handPos, currentPlayer, state, 0);
        -:  724:			
        1:  725:      return 0;
        -:  726:			
        -:  727:    case feast:
        -:  728:      //gain card with cost up to 5
        -:  729:      //Backup hand
    #####:  730:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  731:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  732:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  733:      }
        -:  734:      //Backup hand
        -:  735:
        -:  736:      //Update Coins for Buy
    #####:  737:      updateCoins(currentPlayer, state, 5);
    #####:  738:      x = 1;//Condition to loop on
    #####:  739:      while( x == 1) {//Buy one card
    #####:  740:	if (supplyCount(choice1, state) <= 0){
        -:  741:	  if (DEBUG)
        -:  742:	    printf("None of that card left, sorry!\n");
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  746:	  }
        -:  747:	}
    #####:  748:	else if (state->coins < getCost(choice1)){
    #####:  749:	  printf("That card is too expensive!\n");
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  753:	  }
        -:  754:	}
        -:  755:	else{
        -:  756:
        -:  757:	  if (DEBUG){
        -:  758:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  759:	  }
        -:  760:
    #####:  761:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  762:	  x = 0;//No more buying cards
        -:  763:
        -:  764:	  if (DEBUG){
        -:  765:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  766:	  }
        -:  767:
        -:  768:	}
        -:  769:      }     
        -:  770:
        -:  771:      //Reset Hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	state->hand[currentPlayer][i] = temphand[i];
    #####:  774:	temphand[i] = -1;
        -:  775:      }
        -:  776:      //Reset Hand
        -:  777:      			
    #####:  778:      return 0;
        -:  779:			
        -:  780:    case gardens:
    #####:  781:      return -1;
        -:  782:			
        -:  783:    case mine:
    #####:  784:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  785:
    #####:  786:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  787:	{
    #####:  788:	  return -1;
        -:  789:	}
        -:  790:		
    #####:  791:      if (choice2 > treasure_map || choice2 < curse)
        -:  792:	{
    #####:  793:	  return -1;
        -:  794:	}
        -:  795:
    #####:  796:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  797:	{
    #####:  798:	  return -1;
        -:  799:	}
        -:  800:
    #####:  801:      gainCard(choice2, state, 2, currentPlayer);
        -:  802:
        -:  803:      //discard card from hand
    #####:  804:      discardCard(handPos, currentPlayer, state, 0);
        -:  805:
        -:  806:      //discard trashed card
    #####:  807:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  808:	{
    #####:  809:	  if (state->hand[currentPlayer][i] == j)
        -:  810:	    {
    #####:  811:	      discardCard(i, currentPlayer, state, 0);			
    #####:  812:	      break;
        -:  813:	    }
        -:  814:	}
        -:  815:			
    #####:  816:      return 0;
        -:  817:			
        -:  818:    case remodel:
    #####:  819:      toReturn = cardRemodel(choice1, choice2, card, state, handPos, currentPlayer);
    #####:  820:	  return toReturn;
        -:  821:		
        -:  822:    case smithy:
        -:  823:      //+3 Cards
       58:  824:      toReturn = cardSmithy(card, state, handPos, currentPlayer);
       58:  825:	  return toReturn;
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
        1:  829:      toReturn = cardVillage(card, state, handPos, currentPlayer);
        1:  830:	  return toReturn;
        -:  831:		
        -:  832:    case baron:
    #####:  833:      state->numBuys++;//Increase buys by 1!
    #####:  834:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  835:	int p = 0;//Iterator for hand!
    #####:  836:	int card_not_discarded = 1;//Flag for discard set!
    #####:  837:	while(card_not_discarded){
    #####:  838:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  839:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  840:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  841:	    state->discardCount[currentPlayer]++;
    #####:  842:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  843:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  844:	    }
    #####:  845:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  846:	    state->handCount[currentPlayer]--;
    #####:  847:	    card_not_discarded = 0;//Exit the loop
        -:  848:	  }
    #####:  849:	  else if (p > state->handCount[currentPlayer]){
        -:  850:	    if(DEBUG) {
        -:  851:	      printf("No estate cards in your hand, invalid choice\n");
        -:  852:	      printf("Must gain an estate if there are any\n");
        -:  853:	    }
    #####:  854:	    if (supplyCount(estate, state) > 0){
    #####:  855:	      gainCard(estate, state, 0, currentPlayer);
    #####:  856:	      state->supplyCount[estate]--;//Decrement estates
    #####:  857:	      if (supplyCount(estate, state) == 0){
    #####:  858:		isGameOver(state);
        -:  859:	      }
        -:  860:	    }
    #####:  861:	    card_not_discarded = 0;//Exit the loop
        -:  862:	  }
        -:  863:			    
        -:  864:	  else{
    #####:  865:	    p++;//Next card
        -:  866:	  }
        -:  867:	}
        -:  868:      }
        -:  869:			    
        -:  870:      else{
    #####:  871:	if (supplyCount(estate, state) > 0){
    #####:  872:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  873:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  874:	  if (supplyCount(estate, state) == 0){
    #####:  875:	    isGameOver(state);
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:	    
        -:  880:      
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case great_hall:
    #####:  884:      toReturn = cardGreat_hall(card, state, handPos, currentPlayer);
    #####:  885:	  return toReturn;
        -:  886:		
        -:  887:    case minion:
        -:  888:      //+1 action
    #####:  889:      state->numActions++;
        -:  890:			
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
        -:  893:			
    #####:  894:      if (choice1)		//+2 coins
        -:  895:	{
    #####:  896:	  state->coins = state->coins + 2;
        -:  897:	}
        -:  898:			
    #####:  899:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  900:	{
        -:  901:	  //discard hand
    #####:  902:	  while(numHandCards(state) > 0)
        -:  903:	    {
    #####:  904:	      discardCard(handPos, currentPlayer, state, 0);
        -:  905:	    }
        -:  906:				
        -:  907:	  //draw 4
    #####:  908:	  for (i = 0; i < 4; i++)
        -:  909:	    {
    #####:  910:	      drawCard(currentPlayer, state);
        -:  911:	    }
        -:  912:				
        -:  913:	  //other players discard hand and redraw if hand size > 4
    #####:  914:	  for (i = 0; i < state->numPlayers; i++)
        -:  915:	    {
    #####:  916:	      if (i != currentPlayer)
        -:  917:		{
    #####:  918:		  if ( state->handCount[i] > 4 )
        -:  919:		    {
        -:  920:		      //discard hand
    #####:  921:		      while( state->handCount[i] > 0 )
        -:  922:			{
    #####:  923:			  discardCard(handPos, i, state, 0);
        -:  924:			}
        -:  925:							
        -:  926:		      //draw 4
    #####:  927:		      for (j = 0; j < 4; j++)
        -:  928:			{
    #####:  929:			  drawCard(i, state);
        -:  930:			}
        -:  931:		    }
        -:  932:		}
        -:  933:	    }
        -:  934:				
        -:  935:	}
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case steward:
        3:  939:	  toReturn = cardSteward(choice1, choice2, choice3, card, state, handPos, currentPlayer);
        3:  940:	  return toReturn;
        -:  941:		
        -:  942:    case tribute:
    #####:  943:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  944:	if (state->deckCount[nextPlayer] > 0){
    #####:  945:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  946:	  state->deckCount[nextPlayer]--;
        -:  947:	}
    #####:  948:	else if (state->discardCount[nextPlayer] > 0){
    #####:  949:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  950:	  state->discardCount[nextPlayer]--;
        -:  951:	}
        -:  952:	else{
        -:  953:	  //No Card to Reveal
        -:  954:	  if (DEBUG){
        -:  955:	    printf("No cards to reveal\n");
        -:  956:	  }
        -:  957:	}
        -:  958:      }
        -:  959:	    
        -:  960:      else{
    #####:  961:	if (state->deckCount[nextPlayer] == 0){
    #####:  962:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  963:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  964:	    state->deckCount[nextPlayer]++;
    #####:  965:	    state->discard[nextPlayer][i] = -1;
    #####:  966:	    state->discardCount[nextPlayer]--;
        -:  967:	  }
        -:  968:			    
    #####:  969:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  970:	} 
    #####:  971:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  972:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  973:	state->deckCount[nextPlayer]--;
    #####:  974:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  975:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  976:	state->deckCount[nextPlayer]--;
        -:  977:      }    
        -:  978:		       
    #####:  979:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  980:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  981:	state->playedCardCount++;
    #####:  982:	tributeRevealedCards[1] = -1;
        -:  983:      }
        -:  984:
    #####:  985:      for (i = 0; i <= 2; i ++){
    #####:  986:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  987:	  state->coins += 2;
        -:  988:	}
        -:  989:		    
    #####:  990:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  991:	  drawCard(currentPlayer, state);
    #####:  992:	  drawCard(currentPlayer, state);
        -:  993:	}
        -:  994:	else{//Action Card
    #####:  995:	  state->numActions = state->numActions + 2;
        -:  996:	}
        -:  997:      }
        -:  998:	    
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case ambassador:
    #####: 1002:      j = 0;		//used to check if player has enough cards to discard
        -: 1003:
    #####: 1004:      if (choice2 > 2 || choice2 < 0)
        -: 1005:	{
    #####: 1006:	  return -1;				
        -: 1007:	}
        -: 1008:
    #####: 1009:      if (choice1 == handPos)
        -: 1010:	{
    #####: 1011:	  return -1;
        -: 1012:	}
        -: 1013:
    #####: 1014:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1015:	{
    #####: 1016:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1017:	    {
    #####: 1018:	      j++;
        -: 1019:	    }
        -: 1020:	}
    #####: 1021:      if (j < choice2)
        -: 1022:	{
    #####: 1023:	  return -1;				
        -: 1024:	}
        -: 1025:
        -: 1026:      if (DEBUG) 
        -: 1027:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1028:
        -: 1029:      //increase supply count for choosen card by amount being discarded
    #####: 1030:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1031:			
        -: 1032:      //each other player gains a copy of revealed card
    #####: 1033:      for (i = 0; i < state->numPlayers; i++)
        -: 1034:	{
    #####: 1035:	  if (i != currentPlayer)
        -: 1036:	    {
    #####: 1037:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1038:	    }
        -: 1039:	}
        -: 1040:
        -: 1041:      //discard played card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1043:
        -: 1044:      //trash copies of cards returned to supply
    #####: 1045:      for (j = 0; j < choice2; j++)
        -: 1046:	{
    #####: 1047:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1048:	    {
    #####: 1049:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1050:		{
    #####: 1051:		  discardCard(i, currentPlayer, state, 1);
    #####: 1052:		  break;
        -: 1053:		}
        -: 1054:	    }
        -: 1055:	}			
        -: 1056:
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case cutpurse:
        -: 1060:
    #####: 1061:      updateCoins(currentPlayer, state, 2);
    #####: 1062:      for (i = 0; i < state->numPlayers; i++)
        -: 1063:	{
    #####: 1064:	  if (i != currentPlayer)
        -: 1065:	    {
    #####: 1066:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1067:		{
    #####: 1068:		  if (state->hand[i][j] == copper)
        -: 1069:		    {
    #####: 1070:		      discardCard(j, i, state, 0);
    #####: 1071:		      break;
        -: 1072:		    }
    #####: 1073:		  if (j == state->handCount[i])
        -: 1074:		    {
    #####: 1075:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1076:			{
        -: 1077:			  if (DEBUG)
        -: 1078:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1079:			}	
    #####: 1080:		      break;
        -: 1081:		    }		
        -: 1082:		}
        -: 1083:					
        -: 1084:	    }
        -: 1085:				
        -: 1086:	}				
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1090:
    #####: 1091:      return 0;
        -: 1092:
        -: 1093:		
        -: 1094:    case embargo: 
        -: 1095:      //+2 Coins
    #####: 1096:      state->coins = state->coins + 2;
        -: 1097:			
        -: 1098:      //see if selected pile is in play
    #####: 1099:      if ( state->supplyCount[choice1] == -1 )
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:			
        -: 1104:      //add embargo token to selected supply pile
    #####: 1105:      state->embargoTokens[choice1]++;
        -: 1106:			
        -: 1107:      //trash card
    #####: 1108:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case outpost:
        -: 1112:      //set outpost flag
    #####: 1113:      state->outpostPlayed++;
        -: 1114:			
        -: 1115:      //discard card
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case salvager:
        -: 1120:      //+1 buy
    #####: 1121:      state->numBuys++;
        -: 1122:			
    #####: 1123:      if (choice1)
        -: 1124:	{
        -: 1125:	  //gain coins equal to trashed card
    #####: 1126:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1127:	  //trash card
    #####: 1128:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1129:	}
        -: 1130:			
        -: 1131:      //discard card
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case sea_hag:
    #####: 1136:      for (i = 0; i < state->numPlayers; i++){
    #####: 1137:	if (i != currentPlayer){
    #####: 1138:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1139:	  state->discardCount[i]++;
    #####: 1140:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1141:	}
        -: 1142:      }
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case treasure_map:
        -: 1146:      //search hand for another treasure_map
    #####: 1147:      index = -1;
    #####: 1148:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1149:	{
    #####: 1150:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1151:	    {
    #####: 1152:	      index = i;
    #####: 1153:	      break;
        -: 1154:	    }
        -: 1155:	}
    #####: 1156:      if (index > -1)
        -: 1157:	{
        -: 1158:	  //trash both treasure cards
    #####: 1159:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1160:	  discardCard(index, currentPlayer, state, 1);
        -: 1161:
        -: 1162:	  //gain 4 Gold cards
    #####: 1163:	  for (i = 0; i < 4; i++)
        -: 1164:	    {
    #####: 1165:	      gainCard(gold, state, 1, currentPlayer);
        -: 1166:	    }
        -: 1167:				
        -: 1168:	  //return success
    #####: 1169:	  return 1;
        -: 1170:	}
        -: 1171:			
        -: 1172:      //no second treasure_map found in hand
    #####: 1173:      return -1;
        -: 1174:    }
        -: 1175:	
    #####: 1176:  return -1;
        -: 1177:}
        -: 1178:
       65: 1179:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1180:{
        -: 1181:	
        -: 1182:  //if card is not trashed, added to Played pile 
       65: 1183:  if (trashFlag < 1)
        -: 1184:    {
        -: 1185:      //add card to played pile
       63: 1186:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       63: 1187:      state->playedCardCount++;
        -: 1188:    }
        -: 1189:	
        -: 1190:  //set played card to -1
       65: 1191:  state->hand[currentPlayer][handPos] = -1;
        -: 1192:	
        -: 1193:  //remove card from player's hand
       65: 1194:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1195:    {
        -: 1196:      //reduce number of cards in hand
    #####: 1197:      state->handCount[currentPlayer]--;
        -: 1198:    }
       65: 1199:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1200:    {
        -: 1201:      //reduce number of cards in hand
    #####: 1202:      state->handCount[currentPlayer]--;
        -: 1203:    }
        -: 1204:  else 	
        -: 1205:    {
        -: 1206:      //replace discarded card with last card in hand
       65: 1207:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1208:      //set last card to -1
       65: 1209:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1210:      //reduce number of cards in hand
       65: 1211:      state->handCount[currentPlayer]--;
        -: 1212:    }
        -: 1213:	
       65: 1214:  return 0;
        -: 1215:}
        -: 1216:
        1: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1222:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
        1: 1232:  if (toFlag == 1)
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
        -: 1236:    }
        1: 1237:  else if (toFlag == 2)
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
        -: 1241:    }
        -: 1242:  else
        -: 1243:    {
        1: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
        1: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
        1: 1251:  return 0;
        -: 1252:}
        -: 1253:
       65: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       65: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      390: 1262:  for (i = 0; i < state->handCount[player]; i++)
        -: 1263:    {
      325: 1264:      if (state->hand[player][i] == copper)
        -: 1265:	{
      258: 1266:	  state->coins += 1;
        -: 1267:	}
       67: 1268:      else if (state->hand[player][i] == silver)
        -: 1269:	{
        1: 1270:	  state->coins += 2;
        -: 1271:	}
       66: 1272:      else if (state->hand[player][i] == gold)
        -: 1273:	{
        1: 1274:	  state->coins += 3;
        -: 1275:	}	
        -: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       65: 1279:  state->coins += bonus;
        -: 1280:
       65: 1281:  return 0;
        -: 1282:}
        -: 1283:
       58: 1284:int cardSmithy(int card, struct gameState *state, int handPos, int currentPlayer) {
        -: 1285:	int i;
      116: 1286:	for (i = 0; i < 1; i++) {
       58: 1287:	  drawCard(currentPlayer, state);
        -: 1288:	}
        -: 1289:			
        -: 1290:      //discard card from hand
       58: 1291:    discardCard(handPos, currentPlayer, state, 0);
       58: 1292:    return 0;
        -: 1293:}
        -: 1294:
        1: 1295:int cardVillage(int card, struct gameState *state, int handPos, int currentPlayer) {
        -: 1296:      //+1 Card
        1: 1297:      drawCard(currentPlayer, state);
        -: 1298:			
        -: 1299:      //+2 Actions
        1: 1300:      state->numActions = state->numActions + 3;
        -: 1301:			
        -: 1302:      //discard played card from hand
        1: 1303:      discardCard(handPos, currentPlayer, state, 0);
        1: 1304:      return 0;
        -: 1305:}
        -: 1306:
    #####: 1307:int cardGreat_hall(int card, struct gameState *state, int handPos, int currentPlayer) {
        -: 1308:	//+1 Card
    #####: 1309:      drawCard(currentPlayer, state);
        -: 1310:			
        -: 1311:      //+1 Actions
    #####: 1312:      state->numActions++;
        -: 1313:			
        -: 1314:      //discard card from hand
    #####: 1315:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1316:      return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int cardRemodel(int choice1, int choice2, int card, struct gameState *state, int handPos, int currentPlayer) {
        -: 1320:	int i;
        -: 1321:	
    #####: 1322:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1323:	
    #####: 1324:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
    #####: 1325:	  return -1;
        -: 1326:	}
        -: 1327:
    #####: 1328:      gainCard(choice2, state, 0, currentPlayer);
        -: 1329:
        -: 1330:      //discard card from hand
    #####: 1331:      discardCard(handPos, currentPlayer, state, 0);
        -: 1332:
        -: 1333:      //discard trashed card
    #####: 1334:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1335:	  if (state->hand[currentPlayer][i] == j) {
    #####: 1336:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
        -: 1340:	
    #####: 1341:    return 0;
        -: 1342:}
        -: 1343:
        3: 1344:int cardSteward(int choice1, int choice2, int choice3, int card, struct gameState *state, int handPos, int currentPlayer) {
        3: 1345:	if (choice1 == 1)
        -: 1346:	{
        -: 1347:	  //+2 cards
        1: 1348:	  drawCard(currentPlayer, state);
        1: 1349:	  drawCard(currentPlayer, state);
        2: 1350:	} else if (choice1 == 2) {
        -: 1351:	  //+2 coins
        1: 1352:	  state->coins = state->coins + 2;
        -: 1353:	} else {
        -: 1354:	  //trash 2 cards in hand
        1: 1355:	  discardCard(choice2, currentPlayer, state, 1);
        1: 1356:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1357:	}
        -: 1358:			
        -: 1359:      //discard card from hand
        3: 1360:    discardCard(handPos, currentPlayer, state, 0);
        3: 1361:    return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
