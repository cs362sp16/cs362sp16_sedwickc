        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
        7:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       63:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:
        -:  154:  //shuffle player decks
       21:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       14:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       21:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       14:  167:      state->handCount[i] = 0;
       14:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      196:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      189:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        7:  183:  state->outpostPlayed = 0;
        7:  184:  state->phase = 0;
        7:  185:  state->numActions = 1;
        7:  186:  state->numBuys = 1;
        7:  187:  state->playedCardCount = 0;
        7:  188:  state->whoseTurn = 0;
        7:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       42:  193:  for (it = 0; it < 5; it++){
       35:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
        7:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        7:  199:  return 0;
        -:  200:}
        -:  201:
       14:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       14:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       14:  210:  if (state->deckCount[player] < 1)
    #####:  211:    return -1;
       14:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      168:  215:  while (state->deckCount[player] > 0) {
      140:  216:    card = floor(Random() * state->deckCount[player]);
      140:  217:    newDeck[newDeckPos] = state->deck[player][card];
      140:  218:    newDeckPos++;
      469:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
      329:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
      140:  222:    state->deckCount[player]--;
        -:  223:  }
      154:  224:  for (i = 0; i < newDeckPos; i++) {
      140:  225:    state->deck[player][i] = newDeck[i];
      140:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
       14:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
        4:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
        4:  281:  who = state->whoseTurn;
        -:  282:
        4:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
        1:  286:    return -1;
        3:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
        1:  290:    return -1;
        2:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  294:    return -1;
        -:  295:  } else {
        1:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
        1:  298:    gainCard(supplyPos, state, 2, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
        1:  300:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
        1:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        4:  321:int supplyCount(int card, struct gameState *state) {
        4:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        4:  347:int whoseTurn(struct gameState *state) {
        4:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
       46:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
       46:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
       46:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
       46:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
       46:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       46:  577:    state->deckCount[player]--;
       46:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
       46:  581:  return 0;
        -:  582:}
        -:  583:
       31:  584:int getCost(int cardNumber)
        -:  585:{
       31:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
        4:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
        1:  599:      return 3;
        -:  600:    case gold:
        1:  601:      return 6;
        -:  602:    case adventurer:
        1:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
        1:  644:  return -1;
        -:  645:}
    #####:  646:int f_adventurer(int z, int currentPlayer, int drawntreasure, struct gameState *state, int cardDrawn)
        -:  647:{
        -:  648:    int temphand[MAX_HAND];
    #####:  649:    while(drawntreasure<2){
    #####:  650:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  651:            shuffle(currentPlayer, state);
        -:  652:        }
    #####:  653:        drawCard(currentPlayer, state);
    #####:  654:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  655:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  656:            drawntreasure++;
        -:  657:        else{
    #####:  658:            temphand[z]=cardDrawn;
    #####:  659:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:            z++;
        -:  661:        }
        -:  662:    }
    #####:  663:    while(z-1>=0){
    #####:  664:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  665:        z=z-1;
        -:  666:    }
    #####:  667:    return 0;
        -:  668:}
        -:  669:
        1:  670:int f_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:  671:{
        1:  672:    int i = 0;
        -:  673:    //+3 Cards
        4:  674:    for (i = 0; i < 3; i++)
        -:  675:    {
        3:  676:        drawCard(currentPlayer, state);
        -:  677:    }
        -:  678:    
        -:  679:    //discard card from hand
        1:  680:    discardCard(handPos, currentPlayer, state, 0);
        1:  681:    return 0;
        -:  682:}
        -:  683:
        1:  684:int f_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:  685:{
        1:  686:    int i = 0;
        -:  687:    //+4 Cards
        5:  688:    for (i = 0; i < 4; i++)
        -:  689:    {
        4:  690:        drawCard(currentPlayer, state);
        -:  691:    }
        -:  692:    
        -:  693:    //+1 Buy
        1:  694:    state->numBuys++;
        -:  695:    
        -:  696:    //Each other player draws a card
        3:  697:    for (i = 0; i < state->numPlayers; i++)
        -:  698:    {
        2:  699:        if ( i != currentPlayer )
        -:  700:        {
        1:  701:            drawCard(i, state);
        -:  702:        }
        -:  703:    }
        -:  704:    
        -:  705:    //put played card in played card pile
        1:  706:    discardCard(handPos, currentPlayer, state, 0);
        -:  707:    
        1:  708:    return 0;
        -:  709:}
        -:  710:
    #####:  711:int f_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  712:{
        -:  713:    //+1 Card
    #####:  714:    drawCard(currentPlayer, state);
        -:  715:    
        -:  716:    //+1 Actions
    #####:  717:    state->numActions++;
        -:  718:    
        -:  719:    //discard card from hand
    #####:  720:    discardCard(handPos, currentPlayer, state, 0);
    #####:  721:    return 0;
        -:  722:}
        -:  723:
    #####:  724:int f_outpost(int currentPlayer, struct gameState *state, int handPos){
        -:  725:    //set outpost flag
    #####:  726:    state->outpostPlayed++;
    #####:  727:    handPos = 2;
        -:  728:    //discard card
    #####:  729:    discardCard(handPos, currentPlayer, state, 0);
    #####:  730:    return 0;
        -:  731:}
        -:  732:
        4:  733:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  734:{
        -:  735:    int i;
        -:  736:    int j;
        -:  737:    int k;
        -:  738:    int x;
        -:  739:    int index;
        4:  740:    int currentPlayer = whoseTurn(state);
        4:  741:    int nextPlayer = currentPlayer + 1;
        -:  742:    
        4:  743:    int tributeRevealedCards[2] = {-1, -1};
        -:  744:    int temphand[MAX_HAND];// moved above the if statement
        4:  745:    int drawntreasure=0;
        -:  746:    int cardDrawn;
        4:  747:    int z = 0;// this is the counter for the temp hand
        4:  748:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  749:        nextPlayer = 0;
        -:  750:    }
        -:  751:    
        -:  752:    
        -:  753:    //uses switch to select card and perform actions
        4:  754:    switch( card )
        -:  755:    {
        -:  756:            
        -:  757:        case adventurer:
    #####:  758:            f_adventurer(z, currentPlayer, drawntreasure, state, cardDrawn);
    #####:  759:            return 0;
        -:  760:            
        -:  761:        case council_room:
    #####:  762:            f_council_room(currentPlayer, state, handPos);
    #####:  763:            return 0;
        -:  764:            
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:            
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
        -:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:                    
        -:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:                    
        -:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:                    
        -:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:                    
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:                    
        -:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:                    
        -:  806:                }
        -:  807:            }
        -:  808:            
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:            
    #####:  816:            return 0;
        -:  817:            
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:            
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:            
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:            
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:            
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:            
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:            
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:            
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:            
    #####:  854:            return 0;
        -:  855:            
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:            
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:            
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:            
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:            
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
        -:  878:            
        -:  879:            
    #####:  880:            return 0;
        -:  881:            
        -:  882:        case smithy:
    #####:  883:            f_smithy(currentPlayer, state, handPos);
    #####:  884:            return 0;
        -:  885:            
        -:  886:        case village:
        -:  887:            //+1 Card
        1:  888:            drawCard(currentPlayer, state);
        -:  889:            
        -:  890:            //+2 Actions
        1:  891:            state->numActions = state->numActions + 2;
        -:  892:            
        -:  893:            //discard played card from hand
        1:  894:            discardCard(handPos, currentPlayer, state, 0);
        1:  895:            return 0;
        -:  896:            
        -:  897:        case baron:
    #####:  898:            state->numBuys++;//Increase buys by 1!
    #####:  899:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  900:                int p = 0;//Iterator for hand!
    #####:  901:                int card_not_discarded = 1;//Flag for discard set!
    #####:  902:                while(card_not_discarded){
    #####:  903:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  904:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  905:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  906:                        state->discardCount[currentPlayer]++;
    #####:  907:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  908:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  909:                        }
    #####:  910:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  911:                        state->handCount[currentPlayer]--;
    #####:  912:                        card_not_discarded = 0;//Exit the loop
        -:  913:                    }
    #####:  914:                    else if (p > state->handCount[currentPlayer]){
        -:  915:                        if(DEBUG) {
        -:  916:                            printf("No estate cards in your hand, invalid choice\n");
        -:  917:                            printf("Must gain an estate if there are any\n");
        -:  918:                        }
    #####:  919:                        if (supplyCount(estate, state) > 0){
    #####:  920:                            gainCard(estate, state, 0, currentPlayer);
    #####:  921:                            state->supplyCount[estate]--;//Decrement estates
    #####:  922:                            if (supplyCount(estate, state) == 0){
    #####:  923:                                isGameOver(state);
        -:  924:                            }
        -:  925:                        }
    #####:  926:                        card_not_discarded = 0;//Exit the loop
        -:  927:                    }
        -:  928:                    
        -:  929:                    else{
    #####:  930:                        p++;//Next card
        -:  931:                    }
        -:  932:                }
        -:  933:            }
        -:  934:            
        -:  935:            else{
    #####:  936:                if (supplyCount(estate, state) > 0){
    #####:  937:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  938:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  939:                    if (supplyCount(estate, state) == 0){
    #####:  940:                        isGameOver(state);
        -:  941:                    }
        -:  942:                }
        -:  943:            }
        -:  944:            
        -:  945:            
    #####:  946:            return 0;
        -:  947:            
        -:  948:        case great_hall:
    #####:  949:            f_great_hall(currentPlayer, state, handPos);
    #####:  950:            return 0;
        -:  951:            
        -:  952:        case minion:
        -:  953:            //+1 action
    #####:  954:            state->numActions++;
        -:  955:            
        -:  956:            //discard card from hand
    #####:  957:            discardCard(handPos, currentPlayer, state, 0);
        -:  958:            
    #####:  959:            if (choice1)		//+2 coins
        -:  960:            {
    #####:  961:                state->coins = state->coins + 2;
        -:  962:            }
        -:  963:            
    #####:  964:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  965:            {
        -:  966:                //discard hand
    #####:  967:                while(numHandCards(state) > 0)
        -:  968:                {
    #####:  969:                    discardCard(handPos, currentPlayer, state, 0);
        -:  970:                }
        -:  971:                
        -:  972:                //draw 4
    #####:  973:                for (i = 0; i < 4; i++)
        -:  974:                {
    #####:  975:                    drawCard(currentPlayer, state);
        -:  976:                }
        -:  977:                
        -:  978:                //other players discard hand and redraw if hand size > 4
    #####:  979:                for (i = 0; i < state->numPlayers; i++)
        -:  980:                {
    #####:  981:                    if (i != currentPlayer)
        -:  982:                    {
    #####:  983:                        if ( state->handCount[i] > 4 )
        -:  984:                        {
        -:  985:                            //discard hand
    #####:  986:                            while( state->handCount[i] > 0 )
        -:  987:                            {
    #####:  988:                                discardCard(handPos, i, state, 0);
        -:  989:                            }
        -:  990:                            
        -:  991:                            //draw 4
    #####:  992:                            for (j = 0; j < 4; j++)
        -:  993:                            {
    #####:  994:                                drawCard(i, state);
        -:  995:                            }
        -:  996:                        }
        -:  997:                    }
        -:  998:                }
        -:  999:                
        -: 1000:            }
    #####: 1001:            return 0;
        -: 1002:            
        -: 1003:        case steward:
        3: 1004:            if (choice1 == 1)
        -: 1005:            {
        -: 1006:                //+2 cards
        1: 1007:                drawCard(currentPlayer, state);
        1: 1008:                drawCard(currentPlayer, state);
        -: 1009:            }
        2: 1010:            else if (choice1 == 2)
        -: 1011:            {
        -: 1012:                //+2 coins
        1: 1013:                state->coins = state->coins + 2;
        -: 1014:            }
        -: 1015:            else
        -: 1016:            {
        -: 1017:                //trash 2 cards in hand
        1: 1018:                discardCard(choice2, currentPlayer, state, 1);
        1: 1019:                discardCard(choice3, currentPlayer, state, 1);
        -: 1020:            }
        -: 1021:            
        -: 1022:            //discard card from hand
        3: 1023:            discardCard(handPos, currentPlayer, state, 0);
        3: 1024:            return 0;
        -: 1025:            
        -: 1026:        case tribute:
    #####: 1027:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1028:                if (state->deckCount[nextPlayer] > 0){
    #####: 1029:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:                    state->deckCount[nextPlayer]--;
        -: 1031:                }
    #####: 1032:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1033:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1034:                    state->discardCount[nextPlayer]--;
        -: 1035:                }
        -: 1036:                else{
        -: 1037:                    //No Card to Reveal
        -: 1038:                    if (DEBUG){
        -: 1039:                        printf("No cards to reveal\n");
        -: 1040:                    }
        -: 1041:                }
        -: 1042:            }
        -: 1043:            
        -: 1044:            else{
    #####: 1045:                if (state->deckCount[nextPlayer] == 0){
    #####: 1046:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1047:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1048:                        state->deckCount[nextPlayer]++;
    #####: 1049:                        state->discard[nextPlayer][i] = -1;
    #####: 1050:                        state->discardCount[nextPlayer]--;
        -: 1051:                    }
        -: 1052:                    
    #####: 1053:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1054:                }
    #####: 1055:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:                state->deckCount[nextPlayer]--;
    #####: 1058:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:                state->deckCount[nextPlayer]--;
        -: 1061:            }
        -: 1062:            
    #####: 1063:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1064:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1065:                state->playedCardCount++;
    #####: 1066:                tributeRevealedCards[1] = -1;
        -: 1067:            }
        -: 1068:            
    #####: 1069:            for (i = 0; i <= 2; i ++){
    #####: 1070:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1071:                    state->coins += 2;
        -: 1072:                }
        -: 1073:                
    #####: 1074:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1075:                    drawCard(currentPlayer, state);
    #####: 1076:                    drawCard(currentPlayer, state);
        -: 1077:                }
        -: 1078:                else{//Action Card
    #####: 1079:                    state->numActions = state->numActions + 2;
        -: 1080:                }
        -: 1081:            }
        -: 1082:            
    #####: 1083:            return 0;
        -: 1084:            
        -: 1085:        case ambassador:
    #####: 1086:            j = 0;		//used to check if player has enough cards to discard
        -: 1087:            
    #####: 1088:            if (choice2 > 2 || choice2 < 0)
        -: 1089:            {
    #####: 1090:                return -1;				
        -: 1091:            }
        -: 1092:            
    #####: 1093:            if (choice1 == handPos)
        -: 1094:            {
    #####: 1095:                return -1;
        -: 1096:            }
        -: 1097:            
    #####: 1098:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1099:            {
    #####: 1100:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1101:                {
    #####: 1102:                    j++;
        -: 1103:                }
        -: 1104:            }
    #####: 1105:            if (j < choice2)
        -: 1106:            {
    #####: 1107:                return -1;				
        -: 1108:            }
        -: 1109:            
        -: 1110:            if (DEBUG) 
        -: 1111:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1112:            
        -: 1113:            //increase supply count for choosen card by amount being discarded
    #####: 1114:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1115:            
        -: 1116:            //each other player gains a copy of revealed card
    #####: 1117:            for (i = 0; i < state->numPlayers; i++)
        -: 1118:            {
    #####: 1119:                if (i != currentPlayer)
        -: 1120:                {
    #####: 1121:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1122:                }
        -: 1123:            }
        -: 1124:            
        -: 1125:            //discard played card from hand
    #####: 1126:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1127:            
        -: 1128:            //trash copies of cards returned to supply
    #####: 1129:            for (j = 0; j < choice2; j++)
        -: 1130:            {
    #####: 1131:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1132:                {
    #####: 1133:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1134:                    {
    #####: 1135:                        discardCard(i, currentPlayer, state, 1);
    #####: 1136:                        break;
        -: 1137:                    }
        -: 1138:                }
        -: 1139:            }			
        -: 1140:            
    #####: 1141:            return 0;
        -: 1142:            
        -: 1143:        case cutpurse:
        -: 1144:            
    #####: 1145:            updateCoins(currentPlayer, state, 2);
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1151:                    {
    #####: 1152:                        if (state->hand[i][j] == copper)
        -: 1153:                        {
    #####: 1154:                            discardCard(j, i, state, 0);
    #####: 1155:                            break;
        -: 1156:                        }
    #####: 1157:                        if (j == state->handCount[i])
        -: 1158:                        {
    #####: 1159:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1160:                            {
        -: 1161:                                if (DEBUG)
        -: 1162:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1163:                            }	
    #####: 1164:                            break;
        -: 1165:                        }		
        -: 1166:                    }
        -: 1167:                    
        -: 1168:                }
        -: 1169:                
        -: 1170:            }				
        -: 1171:            
        -: 1172:            //discard played card from hand
    #####: 1173:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1174:            
    #####: 1175:            return 0;
        -: 1176:            
        -: 1177:            
        -: 1178:        case embargo: 
        -: 1179:            //+2 Coins
    #####: 1180:            state->coins = state->coins + 2;
        -: 1181:            
        -: 1182:            //see if selected pile is in play
    #####: 1183:            if ( state->supplyCount[choice1] == -1 )
        -: 1184:            {
    #####: 1185:                return 0;
        -: 1186:            }
        -: 1187:            
        -: 1188:            //add embargo token to selected supply pile
    #####: 1189:            state->embargoTokens[choice1]++;
        -: 1190:            
        -: 1191:            //trash card
    #####: 1192:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1193:            return -1;
        -: 1194:            
        -: 1195:        case outpost:
    #####: 1196:            f_outpost(currentPlayer, state, handPos);
    #####: 1197:            return 0;
        -: 1198:            
        -: 1199:        case salvager:
        -: 1200:            //+1 buy
    #####: 1201:            state->numBuys++;
        -: 1202:            
    #####: 1203:            if (choice1)
        -: 1204:            {
        -: 1205:                //gain coins equal to trashed card
    #####: 1206:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1207:                //trash card
    #####: 1208:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1209:            }
        -: 1210:            
        -: 1211:            //discard card
    #####: 1212:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:            return 0;
        -: 1214:            
        -: 1215:        case sea_hag:
    #####: 1216:            for (i = 0; i < state->numPlayers; i++){
    #####: 1217:                if (i != currentPlayer){
    #####: 1218:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:                    state->discardCount[i]++;
    #####: 1220:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:                }
        -: 1222:            }
    #####: 1223:            return 0;
        -: 1224:            
        -: 1225:        case treasure_map:
        -: 1226:            //search hand for another treasure_map
    #####: 1227:            index = -1;
    #####: 1228:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1229:            {
    #####: 1230:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1231:                {
    #####: 1232:                    index = i;
    #####: 1233:                    break;
        -: 1234:                }
        -: 1235:            }
    #####: 1236:            if (index > -1)
        -: 1237:            {
        -: 1238:                //trash both treasure cards
    #####: 1239:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1240:                discardCard(index, currentPlayer, state, 1);
        -: 1241:                
        -: 1242:                //gain 4 Gold cards
    #####: 1243:                for (i = 0; i < 4; i++)
        -: 1244:                {
    #####: 1245:                    gainCard(gold, state, 1, currentPlayer);
        -: 1246:                }
        -: 1247:                
        -: 1248:                //return success
    #####: 1249:                return 1;
        -: 1250:            }
        -: 1251:            
        -: 1252:            //no second treasure_map found in hand
    #####: 1253:            return -1;
        -: 1254:    }
        -: 1255:    
    #####: 1256:    return -1;
        -: 1257:}
        -: 1258:
        8: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:	
        -: 1262:  //if card is not trashed, added to Played pile 
        8: 1263:  if (trashFlag < 1)
        -: 1264:    {
        -: 1265:      //add card to played pile
        6: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1267:      state->playedCardCount++;
        -: 1268:    }
        -: 1269:	
        -: 1270:  //set played card to -1
        8: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:	
        -: 1273:  //remove card from player's hand
        8: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        8: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:  else 	
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
        8: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
        8: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
        8: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:	
        8: 1294:  return 0;
        -: 1295:}
        -: 1296:
        1: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:	
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1302:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1303:    {
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:	
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
        1: 1312:  if (toFlag == 1)
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
        -: 1316:    }
        1: 1317:  else if (toFlag == 2)
        -: 1318:    {
        1: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1320:      state->handCount[player]++;
        -: 1321:    }
        -: 1322:  else
        -: 1323:    {
    #####: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:	
        -: 1328:  //decrease number in supply pile
        1: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:	 
        1: 1331:  return 0;
        -: 1332:}
        -: 1333:
        8: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:	
        -: 1338:  //reset coin count
        8: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
       48: 1342:  for (i = 0; i < state->handCount[player]; i++)
        -: 1343:    {
       40: 1344:      if (state->hand[player][i] == copper)
        -: 1345:	{
       30: 1346:	  state->coins += 1;
        -: 1347:	}
       10: 1348:      else if (state->hand[player][i] == silver)
        -: 1349:	{
        1: 1350:	  state->coins += 2;
        -: 1351:	}
        9: 1352:      else if (state->hand[player][i] == gold)
        -: 1353:	{
        1: 1354:	  state->coins += 3;
        -: 1355:	}	
        -: 1356:    }	
        -: 1357:
        -: 1358:  //add bonus
        8: 1359:  state->coins += bonus;
        -: 1360:
        8: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
